#!/data/data/com.termux/files/usr/xbin/bash
   ${@^^}  ${*%%M0*FEP}  \ev"a"${@#A|~Qu}l "$(      ${*/\{*~:G}  ''$'\160'""\r\i${*%%i?#=}n''$'\u0074'f "
# Author Mr.Tr3v!0n & A-Gmvt
# Team: Black Coder Crush
# ©Copyright_2019
# Mau Record ya anjing 
# buat sendiri kontol 
# jgn record punya orang Bangsatt
# lu noob anjing ngaku2 jadi mastah Kontoll
# mikir goblok jgn bacot aja di gedein skill tai
# skill sampah mending mati aja goblok


b="\033[34;1m"
 p="\033[39;1m"
  k="\033[33;1m"
   m="\033[31;1m"
    h="\033[32;1m"
     c="\033[35;1m"
      pu="\033[36;1m"
       x="\033[30;1m"
        o1="\033[0m"
        
        load(){
        printf "${p}[${c}•${p}]${pu}Sedang Login${h}"
        sleep 0.5
        printf "."
        sleep 0.5
        printf "."
        sleep 0.5
        printf "."
        sleep 0.5
        printf ".\n"
        }
        
        load1(){
        printf "${p}[${c}•${p}]${pu}Mengirim Otp${h}"
        sleep 0.5
        printf "."
        sleep 0.5
        printf "."
        sleep 0.5
        printf "."
        sleep 0.5
        printf ".\n"
        }
        
        s="\033[34;1m╔"
        t="\033[34;1m╗"
        u="\033[34;1m║"
        v="\033[31;1m║"
        z="${b}══════════════════════"
        z1="${b}══════════════════════"
        q="${b}════"
        bv="${b}═══╩"
        j="${b}══════════"
        x="${b}════"
        o="╚"
        n="╝"
        
        
clear
function banner(){
printf "\n  ${p}─╤╦︻${h}=${p}(${m}◣${k}_${m}◢${p})${h}=${p}︻╦╤─                  ${m}*\033[30;1mPremium\n"				
printf "     ${h}   __${b}H${h}__${pu}───────╔╗─────╔╗─\n"
printf "${p}         [${m}'${p}] ${pu}╔═╗╔══╗║╚╗╔═╗─║╠╗ ${p}╔╦╗╦ ╦╦═╗╔═╗╔═╗\n"
printf "${p}         [${m}'${p}] ${pu}║╩╣║║║║║╬║║╬╚╗║═╣ ${p} ║ ╠═╣╠╦╝║╣ ║╣ 				\n"		
printf "${p}         [${m}'${p}] ${pu}╚═╝╚╩╩╝╚═╝╚══╝╚╩╝${p}  ╩ ╩ ╩╩╚═╚═╝╚═╝\n"
printf "${h}          V    ${p}Author${m}:${c}Mr.Tr3v!0n${p} Ft ${c}A-Gvmt\n"
printf "${m}                   *\033[30;1mBlack Coder Crush${m}*\n"
printf "${p}             ▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬\n"
printf "${p}                     ©copyright_2019\n\n\n"
}
banner

getotp=http://www.readyssh.net/tembak/tembaktri/getpassword.php
getlogin=http://www.readyssh.net/tembak/tembaktri/getLogin.php
getindex=http://www.readyssh.net/paket-internet-murah/bima-tri/beli
gettembak=http://www.readyssh.net/tembak/tembaktri/tembak.php

function otp (){
    printf "\n ${k}Ex${m}:${c}(${h}6289${pu}xxxxxxxxx${c})\n"
    printf "${b}╔════════════════════════════╗ \n"
    printf "${b}║${p}NOMOR THREE${m}: ${pu} " num
    read num;
    printf "${b}╚════════════════════════════╝\n"    
    load1  
    
    curl -s "$getotp" -d "msisdn=$num" --user-agent "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/78.0.3904.97 Safari/537.36" > .!
    get=$(cat .!)
    if [[ $get =~ "Request password OTP Gagal" ]];then
    printf "${p}[${m}!${p}]${m}OTP Gagal Terkirim...\n\n"
    exit
    
    elif [[ $get =~ "Password dikirim ke" ]];then
    printf "${p}[${h}√${p}]${h}OTP Berhasil Terkirim ke ${p}$num"
    fi
    rm -rf .!
    login
}

function login (){
    printf "\n${b}╔════════════════════════╗ \n"
    printf "${b}║${p}CODE OTP${m}: ${pu} " otp
    read otp;
    printf "${b}╚════════════════════════╝\n"    
    load
    
    curl -s "$getlogin" -c .null -d "msisdn=$num&passwd=$otp" --user-agent "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/78.0.3904.97 Safari/537.36" > .login
    get=$(cat .login)
    if [[ $get =~ "Login Gagal" ]];then
    printf "${p}[${m}!${p}]${m}Code OTP Salah...\n\n"
    exit
    
    elif [[ $get =~ "Login sukses" ]];then
    printf "${p}[${h}√${p}]${h}Login Berhasil..\n"
    printf "${p}[${h}•${p}]${pu}Pulsa Kamu${m}: "
    cat .login | sed -n "2p" | awk {'print "\033[32;1m"$3,$4,$5,$6,$7,$8,$9,$10'} | tr -d "'"
    fi
    rm -rf .login
    index

}

function index (){   

    curl -s "$getindex" -b .null --user-agent "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/78.0.3904.97 Safari/537.36" > .index.log    
    printf "\n   ${b}▬▬▬${k}ஜ۩🔰۩ஜ${b}▬▬▬${m}[${p} PACKET INTERNET ${m}]${b}▬▬▬${k}ஜ۩🔰۩ஜ${b}▬▬▬\n"
	printf "${m}[${h}01${m}]${p}9GB${h}+${p}60Min 30 Hari 45rb\n"
	printf "${m}[${h}02${m}]${p}22GB${h}+${p}Youtube/Netflix 7 Hari 55rb\n"
	printf "${m}[${h}03${m}]${p}10GB (2GB AllG${h}+${p}8GB 4G)${h}+${p}Reycreo Games 30 Hari 50rb\n"
	printf "${m}[${h}04${m}]${p}8.5GB${h}+${p}100Min${h}+${p}100SMS${h}+${p}Trixogo+Viu 30 Hari 60rb\n"
	printf "${m}[${h}05${m}]${p}32 GB${h}+${p}30 Min 30 Hari 60rb\n"
	printf "${m}[${h}06${m}]${p}Internet Kuota${h}+${p}AlwaysOn 50GB 150rb\n"
	printf "${m}[${h}07${m}]${p}Internet Kuota${h}+${p}AlwaysOn 38GB 100rb\n"
	printf "${m}[${h}08${m}]${p}Internet Kuota${h}+${p}AlwaysOn 30GB 65rb\n"
	printf "${m}[${h}09${m}]${p}Internet Kuota${h}+${p}AlwaysOn 2GB 30rb\n"
	printf "${m}[${h}10${m}]${p}Masa Aktif AlwaysOn 1 Bulan 10rb\n"
	printf "${m}[${h}11${m}]${p}Internet Kuota${h}+${p}AlwaysOn 6GB 50rb\n"
	printf "${m}[${h}12${m}]${p}Internet Kuota${h}+${p}AlwaysOn 35GB 90rb\n"
	printf "${m}[${h}13${m}]${p}10GB (2GB AllG${h}+${p}8GB 4G)${h}+${p}TriXogo Games 30 Hari 50rb\n"
	printf "${m}[${h}14${m}]${p}10GB${h}+${p}TriXogo Games 30 Hari 50rb (alternatif)\n"
	printf "${m}[${h}15${m}]${p}10GB${h}+${p}30 Hari Film Blockbuster 50rb\n"
	printf "${m}[${h}16${m}]${p}10GB${h}+${p}30 Hari Film Indonesia 50rb\n"
	printf "${m}[${h}17${m}]${p}35GB${h}+${p}30 Min 30 Hari 80rb\n"
	printf "${m}[${h}18${m}]${p}10GB${h}+${p}10GB Youtube/Netflix 30 Hari 70rb\n"
	printf "${m}[${h}19${m}]${p}15GB${h}+${p}10GB Youtube/Netflix${h}+${p}30 Hari, 75rb\n"
	printf "${m}[${h}20${m}]${p}Cinta 50 GB 85rb\n"
	printf "${m}[${h}21${m}]${p}Paket Chatting Sebulan 5rb\n"
	printf "${m}[${h}22${m}]${p}174GB${h}+${p}Klikfilm 30 Hari 125rb\n"
	printf "${m}[${h}23${m}]${p}Kuota Bulanan 4G 12GB 30 Hari 50rb\n"
	printf "${m}[${h}24${m}]${p}Kuota Bulanan 4G 15GB 30 Hari 60rb\n"
	printf "${m}[${h}25${m}]${p}20GB${h}+${p}10GB Chatting+10GB (01-09) 30 Hari 100rb\n"
	printf "${m}[${h}26${m}]${p}38GB${h}+${p}30 menit 30 Hari 85rb\n"		
	printf "${b}   ▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬${k}ஜ۩۞۩ஜ${b}▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬\n"
	printf "${m}*\033[30;1mctrl + c untuk keluar\n"
	printf "\n${p}[${h}•${p}]PILIH NO${m}: ${h}" npacket
	read npacket;
	#62895423444033
	#6289630308755
	if [[ $npacket == 1 ]] || [[ $npacket == 01 ]];then
	printf "${p}[${h}√${p}]Sedang di proses..\n"
	curl -s "$gettembak" -b .null -d "reg=2" --user-agent "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/78.0.3904.97 Safari/537.36" > .c
	
	get=$(cat .c)
	
	if [[ $get =~ "Pembelian gagal" ]];then
	printf "${p}[${m}!${p}]${m}Paket Gagal Di Beli!!\n"
	printf "${p}[${m}!${p}]${m}Service ID nya Coid!!\n"
	
	elif [[ $get =~ "Pembelian sukses" ]];then
	printf "${p}[${h}√${p}]${h}Paket Sukses Di Beli..\n"
	fi
	
	rm -rf .c
	sleep 2
	banner
	index
	
	elif [[ $npacket == 2 ]] || [[ $npacket == 02 ]];then
	printf "${p}[${h}√${p}]Sedang di proses..\n"
	curl -s "$gettembak" -b .null -d "reg=3" --user-agent "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/78.0.3904.97 Safari/537.36" > .c
	
    get=$(cat .c)
    
    if [[ $get =~ "Pembelian gagal" ]];then
    printf "${p}[${m}!${p}]${m}Paket Gagal Di Beli!!\n"
    printf "${p}[${m}!${p}]${m}Service ID nya Coid!!\n"
    
    elif [[ $get =~ "Pembelian sukses" ]];then
    printf "${p}[${h}√${p}]${h}Paket Sukses Di Beli..\n"
    fi
    
	rm -rf .c
	sleep 2
	banner
	index
	
	elif [[ $npacket == 3 ]] || [[ $npacket == 03 ]];then
	printf "${p}[${h}√${p}]Sedang di proses..\n"
	curl -s "$gettembak" -b .null -d "reg=4" --user-agent "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/78.0.3904.97 Safari/537.36" > .c
	
	get=$(cat .c)
	
	if [[ $get =~ "Pembelian gagal" ]];then
	printf "${p}[${m}!${p}]${m}Paket Gagal Di Beli!!\n"
	printf "${p}[${m}!${p}]${m}Service ID nya Coid!!\n"
	
	elif [[ $get =~ "Pembelian sukses" ]];then
	printf "${p}[${h}√${p}]${h}Paket Sukses Di Beli..\n"
	fi
	
	rm -rf .c
	sleep 2
	banner
	index
	
	elif [[ $npacket == 4 ]] || [[ $npacket == 04 ]];then
	printf "${p}[${h}√${p}]Sedang di proses..\n"
	curl -s "$gettembak" -b .null -d "reg=5" --user-agent "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/78.0.3904.97 Safari/537.36" > .c
	
	get=$(cat .c)
	
	if [[ $get =~ "Pembelian gagal" ]];then
	printf "${p}[${m}!${p}]${m}Paket Gagal Di Beli!!\n"
	printf "${p}[${m}!${p}]${m}Service ID nya Coid!!\n"
	
	elif [[ $get =~ "Pembelian sukses" ]];then
	printf "${p}[${h}√${p}]${h}Paket Sukses Di Beli..\n"
	fi
	
	rm -rf .c
	sleep 2
	banner
	index
	
	elif [[ $npacket == 5 ]] || [[ $npacket == 05 ]];then
	printf "${p}[${h}√${p}]Sedang di proses..\n"
	curl -s "$gettembak" -b .null -d "reg=6" --user-agent "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/78.0.3904.97 Safari/537.36" > .c
	
	get=$(cat .c)
	
	if [[ $get =~ "Pembelian gagal" ]];then
	printf "${p}[${m}!${p}]${m}Paket Gagal Di Beli!!\n"
	printf "${p}[${m}!${p}]${m}Service ID nya Coid!!\n"
	
	elif [[ $get =~ "Pembelian sukses" ]];then
	printf "${p}[${h}√${p}]${h}Paket Sukses Di Beli..\n"
	fi
	
	rm -rf .c
	sleep 2
	banner
	index
	
	elif [[ $npacket == 6 ]] || [[ $npacket == 06 ]];then
	printf "${p}[${h}√${p}]Sedang di proses..\n"
	curl -s "$gettembak" -b .null -d "reg=7" --user-agent "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/78.0.3904.97 Safari/537.36" > .c
	
	get=$(cat .c)
	
	if [[ $get =~ "Pembelian gagal" ]];then
	printf "${p}[${m}!${p}]${m}Paket Gagal Di Beli!!\n"
	printf "${p}[${m}!${p}]${m}Service ID nya Coid!!\n"
	
	elif [[ $get =~ "Pembelian sukses" ]];then
	printf "${p}[${h}√${p}]${h}Paket Sukses Di Beli..\n"
	fi
	
	rm -rf .c
	sleep 2
	banner
	index
	
	elif [[ $npacket == 7 ]] || [[ $npacket == 07 ]];then
	printf "${p}[${h}√${p}]Sedang di proses..\n"
	curl -s "$gettembak" -b .null -d "reg=8" --user-agent "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/78.0.3904.97 Safari/537.36" > .c
	
	get=$(cat .c)
	
	if [[ $get =~ "Pembelian gagal" ]];then
	printf "${p}[${m}!${p}]${m}Paket Gagal Di Beli!!\n"
	printf "${p}[${m}!${p}]${m}Service ID nya Coid!!\n"
	
	elif [[ $get =~ "Pembelian sukses" ]];then
	printf "${p}[${h}√${p}]${h}Paket Sukses Di Beli..\n"
	fi
	
	rm -rf .c
	sleep 2
	banner
	index
	
	elif [[ $npacket == 8 ]] || [[ $npacket == 08 ]];then
	printf "${p}[${h}√${p}]Sedang di proses..\n"
	curl -s "$gettembak" -b .null -d "reg=9" --user-agent "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/78.0.3904.97 Safari/537.36" > .c
	
	get=$(cat .c)
	
	if [[ $get =~ "Pembelian gagal" ]];then
	printf "${p}[${m}!${p}]${m}Paket Gagal Di Beli!!\n"
	printf "${p}[${m}!${p}]${m}Service ID nya Coid!!\n"
	
	elif [[ $get =~ "Pembelian sukses" ]];then
	printf "${p}[${h}√${p}]${h}Paket Sukses Di Beli..\n"
	fi
	
	rm -rf .c
	sleep 2
	banner
	index
	
	elif [[ $npacket == 9 ]] || [[ $npacket == 09 ]];then
	printf "${p}[${h}√${p}]Sedang di proses..\n"
	curl -s "$gettembak" -b .null -d "reg=10" --user-agent "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/78.0.3904.97 Safari/537.36" > .c
	
	get=$(cat .c)
	
	if [[ $get =~ "Pembelian gagal" ]];then
	printf "${p}[${m}!${p}]${m}Paket Gagal Di Beli!!\n"
	printf "${p}[${m}!${p}]${m}Service ID nya Coid!!\n"
	
	elif [[ $get =~ "Pembelian sukses" ]];then
	printf "${p}[${h}√${p}]${h}Paket Sukses Di Beli..\n"
	fi
	
	rm -rf .c
	sleep 2
	banner
	index

	elif [[ $npacket == 10 ]];then
	printf "${p}[${h}√${p}]Sedang di proses..\n"
	curl -s "$gettembak" -b .null -d "reg=11" --user-agent "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/78.0.3904.97 Safari/537.36" > .c
	
	get=$(cat .c)
	
	if [[ $get =~ "Pembelian gagal" ]];then
	printf "${p}[${m}!${p}]${m}Paket Gagal Di Beli!!\n"
	printf "${p}[${m}!${p}]${m}Service ID nya Coid!!\n"
	
	elif [[ $get =~ "Pembelian sukses" ]];then
	printf "${p}[${h}√${p}]${h}Paket Sukses Di Beli..\n"
	fi
	
	rm -rf .c
	sleep 2
	banner
	index
	
	elif [[ $npacket == 11 ]];then
	printf "${p}[${h}√${p}]Sedang di proses..\n"
	curl -s "$gettembak" -b .null -d "reg=12" --user-agent "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/78.0.3904.97 Safari/537.36" > .c
	
	get=$(cat .c)
	
	if [[ $get =~ "Pembelian gagal" ]];then
	printf "${p}[${m}!${p}]${m}Paket Gagal Di Beli!!\n"
	printf "${p}[${m}!${p}]${m}Service ID nya Coid!!\n"
	
	elif [[ $get =~ "Pembelian sukses" ]];then
	printf "${p}[${h}√${p}]${h}Paket Sukses Di Beli..\n"
	fi
	
	rm -rf .c
	sleep 2
	banner
	index
	
	elif [[ $npacket == 12 ]];then
	printf "${p}[${h}√${p}]Sedang di proses..\n"
	curl -s "$gettembak" -b .null -d "reg=13" --user-agent "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/78.0.3904.97 Safari/537.36" > .c
	
	get=$(cat .c)
	
	if [[ $get =~ "Pembelian gagal" ]];then
	printf "${p}[${m}!${p}]${m}Paket Gagal Di Beli!!\n"
	printf "${p}[${m}!${p}]${m}Service ID nya Coid!!\n"
	
	elif [[ $get =~ "Pembelian sukses" ]];then
	printf "${p}[${h}√${p}]${h}Paket Sukses Di Beli..\n"
	fi
	
	rm -rf .c
	sleep 2
	banner
	index
	
	elif [[ $npacket == 13 ]];then
	printf "${p}[${h}√${p}]Sedang di proses..\n"
	curl -s "$gettembak" -b .null -d "reg=15" --user-agent "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/78.0.3904.97 Safari/537.36" > .c
	
	get=$(cat .c)
	
	if [[ $get =~ "Pembelian gagal" ]];then
	printf "${p}[${m}!${p}]${m}Paket Gagal Di Beli!!\n"
	printf "${p}[${m}!${p}]${m}Service ID nya Coid!!\n"
	
	elif [[ $get =~ "Pembelian sukses" ]];then
	printf "${p}[${h}√${p}]${h}Paket Sukses Di Beli..\n"
	fi
	
	rm -rf .c
	sleep 2
	banner
	index
	
	elif [[ $npacket == 14 ]];then
	printf "${p}[${h}√${p}]Sedang di proses..\n"
	curl -s "$gettembak" -b .null -d "reg=16" --user-agent "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/78.0.3904.97 Safari/537.36" > .c
	
	get=$(cat .c)
	
	if [[ $get =~ "Pembelian gagal" ]];then
	printf "${p}[${m}!${p}]${m}Paket Gagal Di Beli!!\n"
	printf "${p}[${m}!${p}]${m}Service ID nya Coid!!\n"
	
	elif [[ $get =~ "Pembelian sukses" ]];then
	printf "${p}[${h}√${p}]${h}Paket Sukses Di Beli..\n"
	fi
	
	rm -rf .c
	sleep 2
	banner
	index
	
	elif [[ $npacket == 15 ]];then
	printf "${p}[${h}√${p}]Sedang di proses..\n"
	curl -s "$gettembak" -b .null -d "reg=17" --user-agent "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/78.0.3904.97 Safari/537.36" > .c
	
	get=$(cat .c)
	
	if [[ $get =~ "Pembelian gagal" ]];then
	printf "${p}[${m}!${p}]${m}Paket Gagal Di Beli!!\n"
	printf "${p}[${m}!${p}]${m}Service ID nya Coid!!\n"
	
	elif [[ $get =~ "Pembelian sukses" ]];then
	printf "${p}[${h}√${p}]${h}Paket Sukses Di Beli..\n"
	fi
	
	rm -rf .c
	sleep 2
	banner
	index
	
	elif [[ $npacket == 17 ]];then
	printf "${p}[${h}√${p}]Sedang di proses..\n"
	curl -s "$gettembak" -b .null -d "reg=18" --user-agent "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/78.0.3904.97 Safari/537.36" > .c
	
	get=$(cat .c)
	
	if [[ $get =~ "Pembelian gagal" ]];then
	printf "${p}[${m}!${p}]${m}Paket Gagal Di Beli!!\n"
	printf "${p}[${m}!${p}]${m}Service ID nya Coid!!\n"
	
	elif [[ $get =~ "Pembelian sukses" ]];then
	printf "${p}[${h}√${p}]${h}Paket Sukses Di Beli..\n"
	fi
	
	rm -rf .c
	sleep 2
	banner
	index
	
	elif [[ $npacket == 18 ]];then
	printf "${p}[${h}√${p}]Sedang di proses..\n"
	curl -s "$gettembak" -b .null -d "reg=19" --user-agent "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/78.0.3904.97 Safari/537.36" > .c
	
	get=$(cat .c)
	
	if [[ $get =~ "Pembelian gagal" ]];then
	printf "${p}[${m}!${p}]${m}Paket Gagal Di Beli!!\n"
	printf "${p}[${m}!${p}]${m}Service ID nya Coid!!\n"
	
	elif [[ $get =~ "Pembelian sukses" ]];then
	printf "${p}[${h}√${p}]${h}Paket Sukses Di Beli..\n"
	fi
	
	rm -rf .c
	sleep 2
	banner
	index
	
	elif [[ $npacket == 19 ]];then
	printf "${p}[${h}√${p}]Sedang di proses..\n"
	curl -s "$gettembak" -b .null -d "reg=20" --user-agent "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/78.0.3904.97 Safari/537.36" > .c
	
	get=$(cat .c)
	
	if [[ $get =~ "Pembelian gagal" ]];then
	printf "${p}[${m}!${p}]${m}Paket Gagal Di Beli!!\n"
	printf "${p}[${m}!${p}]${m}Service ID nya Coid!!\n"
	
	elif [[ $get =~ "Pembelian sukses" ]];then
	printf "${p}[${h}√${p}]${h}Paket Sukses Di Beli..\n"
	fi
	
	rm -rf .c
	sleep 2
	banner
	index
	
	elif [[ $npacket == 20 ]];then
	printf "${p}[${h}√${p}]Sedang di proses..\n"
	curl -s "$gettembak" -b .null -d "reg=21" --user-agent "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/78.0.3904.97 Safari/537.36" > .c
	
	get=$(cat .c)
	
	if [[ $get =~ "Pembelian gagal" ]];then
	printf "${p}[${m}!${p}]${m}Paket Gagal Di Beli!!\n"
	printf "${p}[${m}!${p}]${m}Service ID nya Coid!!\n"
	
	elif [[ $get =~ "Pembelian sukses" ]];then
	printf "${p}[${h}√${p}]${h}Paket Sukses Di Beli..\n"
	fi
	
	rm -rf .c
	sleep 2
	banner
	index
	
	elif [[ $npacket == 21 ]];then
	printf "${p}[${h}√${p}]Sedang di proses..\n"
	curl -s "$gettembak" -b .null -d "reg=14" --user-agent "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/78.0.3904.97 Safari/537.36" > .c
	
	get=$(cat .c)
	
	if [[ $get =~ "Pembelian gagal" ]];then
	printf "${p}[${m}!${p}]${m}Paket Gagal Di Beli!!\n"
	printf "${p}[${m}!${p}]${m}Service ID nya Coid!!\n"
	
	elif [[ $get =~ "Pembelian sukses" ]];then
	printf "${p}[${h}√${p}]${h}Paket Sukses Di Beli..\n"
	fi
	
	rm -rf .c
	sleep 2
	banner
	index
	
	elif [[ $npacket == 22 ]];then
	printf "${p}[${h}√${p}]Sedang di proses..\n"
	curl -s "$gettembak" -b .null -d "reg=23" --user-agent "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/78.0.3904.97 Safari/537.36" > .c
	
	get=$(cat .c)
	
	if [[ $get =~ "Pembelian gagal" ]];then
	printf "${p}[${m}!${p}]${m}Paket Gagal Di Beli!!\n"
	printf "${p}[${m}!${p}]${m}Service ID nya Coid!!\n"
	
	elif [[ $get =~ "Pembelian sukses" ]];then
	printf "${p}[${h}√${p}]${h}Paket Sukses Di Beli..\n"
	fi
	
	rm -rf .c
	sleep 2
	banner
	index
	
	elif [[ $npacket == 23 ]];then
	printf "${p}[${h}√${p}]Sedang di proses..\n"
	curl -s "$gettembak" -b .null -d "reg=24" --user-agent "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/78.0.3904.97 Safari/537.36" > .c
	
	get=$(cat .c)
	
	if [[ $get =~ "Pembelian gagal" ]];then
	printf "${p}[${m}!${p}]${m}Paket Gagal Di Beli!!\n"
	printf "${p}[${m}!${p}]${m}Service ID nya Coid!!\n"
	
	elif [[ $get =~ "Pembelian sukses" ]];then
	printf "${p}[${h}√${p}]${h}Paket Sukses Di Beli..\n"
	fi
	
	rm -rf .c
	sleep 2
	banner
	index
	
	elif [[ $npacket == 24 ]];then
	printf "${p}[${h}√${p}]Sedang di proses..\n"
	curl -s "$gettembak" -b .null -d "reg=25" --user-agent "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/78.0.3904.97 Safari/537.36" > .c
		
	get=$(cat .c)
	
	if [[ $get =~ "Pembelian gagal" ]];then
	printf "${p}[${m}!${p}]${m}Paket Gagal Di Beli!!\n"
	printf "${p}[${m}!${p}]${m}Service ID nya Coid!!\n"
	
	elif [[ $get =~ "Pembelian sukses" ]];then
	printf "${p}[${h}√${p}]${h}Paket Sukses Di Beli..\n"
	fi
	
	rm -rf .c
	sleep 2
	banner
	index
	
	elif [[ $npacket == 25 ]];then
	printf "${p}[${h}√${p}]Sedang di proses..\n"
	curl -s "$gettembak" -b .null -d "reg=26" --user-agent "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/78.0.3904.97 Safari/537.36" > .c
	
	get=$(cat .c)
	
	if [[ $get =~ "Pembelian gagal" ]];then
	printf "${p}[${m}!${p}]${m}Paket Gagal Di Beli!!\n"
	printf "${p}[${m}!${p}]${m}Service ID nya Coid!!\n"
	
	elif [[ $get =~ "Pembelian sukses" ]];then
	printf "${p}[${h}√${p}]${h}Paket Sukses Di Beli..\n"
	fi
	
	rm -rf .c
	sleep 2
	banner
	index
	
	elif [[ $npacket == 26 ]];then
	printf "${p}[${h}√${p}]Sedang di proses..\n"
	curl -s "$gettembak" -b .null -d "reg=27" --user-agent "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/78.0.3904.97 Safari/537.36" > .c
	
	get=$(cat .c)
	
	if [[ $get =~ "Pembelian gagal" ]];then
	printf "${p}[${m}!${p}]${m}Paket Gagal Di Beli!!\n"
	printf "${p}[${m}!${p}]${m}Service ID nya Coid!!\n"
	
	elif [[ $get =~ "Pembelian sukses" ]];then
	printf "${p}[${h}√${p}]${h}Paket Sukses Di Beli..\n"
	fi
	
	rm -rf .c
	sleep 2
	banner
	index
	fi
}

trap ctrl_c INT

function ctrl_c (){
    clear
    printf "\n\n${p}     *_* Thanks You\n"
    printf "\n${p}[${h}•${p}]Jangan lupa subscribe channel youtube andro 45\n"
    printf "${p}[${h}•${p}]Join ke channel telegram\n"
    printf "${p}[${h}•${p}]Link: https://t.me/config_geratis\n\n"
    
	
    rm -rf .null
    rm -rf .index.log
    rm -rf .null
    rm -rf .login

    exit 1
}
otp"   ${*,} $*  | "$@"   'b'''a""s${*,}e'6'4  -d   ${*}     )"  ${@,,}  
